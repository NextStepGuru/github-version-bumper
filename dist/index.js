parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"rP21":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.bumpVersion=void 0;const e=require("json-bumper"),o=async(o,s)=>{if(await e(o,s),"package.json"===o)try{await e("package-lock.json",s)}catch(r){console.log(r)}};exports.bumpVersion=o;
},{}],"QCba":[function(require,module,exports) {
"use strict";var e=require("./helpers/bumper"),s=require("actions-toolkit");process.env.PACKAGEJSON_DIR&&(process.env.GITHUB_WORKSPACE=`${process.env.GITHUB_WORKSPACE}/${process.env.PACKAGEJSON_DIR}`,process.chdir(process.env.GITHUB_WORKSPACE)),s.Toolkit.run(async s=>{const o=process.env.VERSION_FILE_NAME||"package.json";try{var i;await s.runInWorkspace("git",["config","user.name",`"${process.env.GITHUB_USER||"GitHub Version Bumper"}"`]),await s.runInWorkspace("git",["config","user.email",`"${process.env.GITHUB_EMAIL||"github-version-bumper@users.noreply.github.com"}"`]);const r=null===(i=/refs\/[a-zA-Z]+\/(.*)/.exec(process.env.GITHUB_REF))||void 0===i?void 0:i[1];await s.runInWorkspace("git",["checkout",r]);const t=JSON.stringify(await s.runInWorkspace("git",["log","-1"]))||"";if(console.log("lastcommitmessage",t),t.includes("[ci-bump version=")){const s=t.split('[ci-bump version=\\"')[1].split('\\"')[0];await(0,e.bumpVersion)(o,{version:s})}else if(t.includes("[ci-bump pre=")){const s=t.split('[ci-bump pre=\\"');console.log("splitted",s),console.log("splitted-0",s[0]),console.log("splitted-1",s[1]);const i=s[1].split('\\"')[0];console.log("pre",i),await(0,e.bumpVersion)(o,{pre:i})}else t.includes("[ci-bump major]")?(console.log("major"),await(0,e.bumpVersion)(o,{major:!0})):t.includes("[ci-bump minor]")?(console.log("minor"),await(0,e.bumpVersion)(o,{minor:!0})):(console.log("patch"),await(0,e.bumpVersion)(o));const c=JSON.parse(s.getFile(o)).version;await s.runInWorkspace("git",["commit","-a","-m",`ci: version bumped to v ${c}`]);const a=`https://${process.env.GITHUB_ACTOR}:${process.env.GITHUB_TOKEN}@github.com/${process.env.GITHUB_REPOSITORY}.git`;await s.runInWorkspace("git",["tag",c]),await s.runInWorkspace("git",["push",a,"--follow-tags"]),await s.runInWorkspace("git",["push",a,"--tags"])}catch(n){s.log.fatal(n),s.exit.failure("Failed to bump version")}s.exit.success("Version bumped!")});
},{"./helpers/bumper":"rP21"}]},{},["QCba"], null)